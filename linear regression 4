{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6243fcc7-55d0-4798-9d40-813f953268a0",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np \n",
    "import statsmodels.api as sm "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bbfb1e0a-b2cf-4129-9087-5c74a2d15fd3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>selling_price</th>\n",
       "      <th>year</th>\n",
       "      <th>km_driven</th>\n",
       "      <th>mileage</th>\n",
       "      <th>engine</th>\n",
       "      <th>max_power</th>\n",
       "      <th>age</th>\n",
       "      <th>make</th>\n",
       "      <th>model</th>\n",
       "      <th>Individual</th>\n",
       "      <th>Trustmark Dealer</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>LPG</th>\n",
       "      <th>Petrol</th>\n",
       "      <th>Manual</th>\n",
       "      <th>5</th>\n",
       "      <th>&gt;5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.111046</td>\n",
       "      <td>-0.801317</td>\n",
       "      <td>1.195828</td>\n",
       "      <td>0.045745</td>\n",
       "      <td>-1.310754</td>\n",
       "      <td>-1.157780</td>\n",
       "      <td>0.801317</td>\n",
       "      <td>-0.433854</td>\n",
       "      <td>-1.125683</td>\n",
       "      <td>1.248892</td>\n",
       "      <td>-0.098382</td>\n",
       "      <td>-0.985275</td>\n",
       "      <td>-0.020095</td>\n",
       "      <td>-0.056917</td>\n",
       "      <td>1.024622</td>\n",
       "      <td>0.495818</td>\n",
       "      <td>0.444503</td>\n",
       "      <td>-0.424728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.223944</td>\n",
       "      <td>0.450030</td>\n",
       "      <td>-0.737872</td>\n",
       "      <td>-0.140402</td>\n",
       "      <td>-0.537456</td>\n",
       "      <td>-0.360203</td>\n",
       "      <td>-0.450030</td>\n",
       "      <td>-0.327501</td>\n",
       "      <td>-0.333227</td>\n",
       "      <td>1.248892</td>\n",
       "      <td>-0.098382</td>\n",
       "      <td>-0.985275</td>\n",
       "      <td>-0.020095</td>\n",
       "      <td>-0.056917</td>\n",
       "      <td>1.024622</td>\n",
       "      <td>0.495818</td>\n",
       "      <td>0.444503</td>\n",
       "      <td>-0.424728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.915058</td>\n",
       "      <td>-1.426990</td>\n",
       "      <td>0.035608</td>\n",
       "      <td>-0.582501</td>\n",
       "      <td>-0.537456</td>\n",
       "      <td>-0.404885</td>\n",
       "      <td>1.426990</td>\n",
       "      <td>-0.327501</td>\n",
       "      <td>-0.789807</td>\n",
       "      <td>1.248892</td>\n",
       "      <td>-0.098382</td>\n",
       "      <td>-0.985275</td>\n",
       "      <td>-0.020095</td>\n",
       "      <td>-0.056917</td>\n",
       "      <td>1.024622</td>\n",
       "      <td>0.495818</td>\n",
       "      <td>0.444503</td>\n",
       "      <td>-0.424728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.892365</td>\n",
       "      <td>-0.801317</td>\n",
       "      <td>-0.409143</td>\n",
       "      <td>0.329620</td>\n",
       "      <td>-0.921213</td>\n",
       "      <td>-0.693085</td>\n",
       "      <td>0.801317</td>\n",
       "      <td>-0.433854</td>\n",
       "      <td>-0.905265</td>\n",
       "      <td>1.248892</td>\n",
       "      <td>-0.098382</td>\n",
       "      <td>-0.985275</td>\n",
       "      <td>-0.020095</td>\n",
       "      <td>-0.056917</td>\n",
       "      <td>1.024622</td>\n",
       "      <td>0.495818</td>\n",
       "      <td>0.444503</td>\n",
       "      <td>-0.424728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.182683</td>\n",
       "      <td>0.137194</td>\n",
       "      <td>-0.544502</td>\n",
       "      <td>0.760085</td>\n",
       "      <td>0.042999</td>\n",
       "      <td>0.010435</td>\n",
       "      <td>-0.137194</td>\n",
       "      <td>-0.246579</td>\n",
       "      <td>-0.013096</td>\n",
       "      <td>-0.800710</td>\n",
       "      <td>-0.098382</td>\n",
       "      <td>1.014945</td>\n",
       "      <td>-0.020095</td>\n",
       "      <td>-0.056917</td>\n",
       "      <td>-0.975970</td>\n",
       "      <td>0.495818</td>\n",
       "      <td>0.444503</td>\n",
       "      <td>-0.424728</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   selling_price      year  km_driven   mileage    engine  max_power  \\\n",
       "0      -1.111046 -0.801317   1.195828  0.045745 -1.310754  -1.157780   \n",
       "1      -0.223944  0.450030  -0.737872 -0.140402 -0.537456  -0.360203   \n",
       "2      -0.915058 -1.426990   0.035608 -0.582501 -0.537456  -0.404885   \n",
       "3      -0.892365 -0.801317  -0.409143  0.329620 -0.921213  -0.693085   \n",
       "4      -0.182683  0.137194  -0.544502  0.760085  0.042999   0.010435   \n",
       "\n",
       "        age      make     model  Individual  Trustmark Dealer    Diesel  \\\n",
       "0  0.801317 -0.433854 -1.125683    1.248892         -0.098382 -0.985275   \n",
       "1 -0.450030 -0.327501 -0.333227    1.248892         -0.098382 -0.985275   \n",
       "2  1.426990 -0.327501 -0.789807    1.248892         -0.098382 -0.985275   \n",
       "3  0.801317 -0.433854 -0.905265    1.248892         -0.098382 -0.985275   \n",
       "4 -0.137194 -0.246579 -0.013096   -0.800710         -0.098382  1.014945   \n",
       "\n",
       "   Electric       LPG    Petrol    Manual         5        >5  \n",
       "0 -0.020095 -0.056917  1.024622  0.495818  0.444503 -0.424728  \n",
       "1 -0.020095 -0.056917  1.024622  0.495818  0.444503 -0.424728  \n",
       "2 -0.020095 -0.056917  1.024622  0.495818  0.444503 -0.424728  \n",
       "3 -0.020095 -0.056917  1.024622  0.495818  0.444503 -0.424728  \n",
       "4 -0.020095 -0.056917 -0.975970  0.495818  0.444503 -0.424728  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('cars24-car-price-clean.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b09ca6d7-b1b8-44b9-8905-623425b32fdb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:          selling_price   R-squared:                       0.941\n",
      "Model:                            OLS   Adj. R-squared:                  0.941\n",
      "Method:                 Least Squares   F-statistic:                 1.495e+04\n",
      "Date:                Thu, 28 Dec 2023   Prob (F-statistic):               0.00\n",
      "Time:                        21:52:18   Log-Likelihood:                -7.3343\n",
      "No. Observations:               15856   AIC:                             50.67\n",
      "Df Residuals:                   15838   BIC:                             188.8\n",
      "Df Model:                          17                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         -0.0004      0.002     -0.223      0.823      -0.004       0.003\n",
      "x1          5.358e+09    2.2e+10      0.243      0.808   -3.79e+10    4.86e+10\n",
      "x2            -0.0169      0.002     -7.977      0.000      -0.021      -0.013\n",
      "x3            -0.0498      0.003    -14.435      0.000      -0.057      -0.043\n",
      "x4             0.0307      0.005      6.379      0.000       0.021       0.040\n",
      "x5             0.0302      0.004      7.026      0.000       0.022       0.039\n",
      "x6          5.358e+09    2.2e+10      0.243      0.808   -3.79e+10    4.86e+10\n",
      "x7             0.0607      0.003     17.612      0.000       0.054       0.067\n",
      "x8             0.7907      0.005    171.025      0.000       0.782       0.800\n",
      "x9            -0.0179      0.002     -8.904      0.000      -0.022      -0.014\n",
      "x10           -0.0031      0.002     -1.606      0.108      -0.007       0.001\n",
      "x11            0.0129      0.008      1.614      0.107      -0.003       0.029\n",
      "x12            0.0155      0.002      7.266      0.000       0.011       0.020\n",
      "x13            0.0023      0.002      1.061      0.289      -0.002       0.007\n",
      "x14           -0.0238      0.008     -2.897      0.004      -0.040      -0.008\n",
      "x15           -0.0136      0.003     -5.284      0.000      -0.019      -0.009\n",
      "x16           -0.0264      0.007     -4.005      0.000      -0.039      -0.013\n",
      "x17           -0.0359      0.007     -5.168      0.000      -0.050      -0.022\n",
      "==============================================================================\n",
      "Omnibus:                     3788.560   Durbin-Watson:                   2.003\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           169284.786\n",
      "Skew:                           0.335   Prob(JB):                         0.00\n",
      "Kurtosis:                      18.993   Cond. No.                     3.46e+13\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 6.03e-23. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = df[df.columns.drop('selling_price')]\n",
    "y = df[\"selling_price\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_tr_scaled = scaler.fit_transform(X_train)\n",
    "\n",
    "X_sm = sm.add_constant(X_tr_scaled)  #Statmodels default is without intercept, to add intercept we need to add constant\n",
    "\n",
    "sm_model = sm.OLS(y_train, X_sm).fit()\n",
    "\n",
    "print(sm_model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6f093985-8001-467d-bc9a-b6df127fa745",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from statsmodels.stats.outliers_influence import variance_inflation_factor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7d96d69f-e1cf-4e68-af74-b55e636d27ec",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vidyasagar/anaconda3/lib/python3.11/site-packages/statsmodels/stats/outliers_influence.py:195: RuntimeWarning: divide by zero encountered in scalar divide\n",
      "  vif = 1. / (1. - r_squared_i)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>year</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>age</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Petrol</td>\n",
       "      <td>18.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Diesel</td>\n",
       "      <td>17.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>&gt;5</td>\n",
       "      <td>13.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5</td>\n",
       "      <td>11.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>engine</td>\n",
       "      <td>6.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>model</td>\n",
       "      <td>5.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>max_power</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>mileage</td>\n",
       "      <td>3.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>make</td>\n",
       "      <td>3.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Manual</td>\n",
       "      <td>1.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>LPG</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Electric</td>\n",
       "      <td>1.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>km_driven</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Individual</td>\n",
       "      <td>1.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Trustmark Dealer</td>\n",
       "      <td>1.02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Features    VIF\n",
       "0               year    inf\n",
       "5                age    inf\n",
       "13            Petrol  18.30\n",
       "10            Diesel  17.30\n",
       "16                >5  13.04\n",
       "15                 5  11.75\n",
       "3             engine   6.26\n",
       "7              model   5.78\n",
       "4          max_power   5.00\n",
       "2            mileage   3.22\n",
       "6               make   3.21\n",
       "14            Manual   1.78\n",
       "12               LPG   1.25\n",
       "11          Electric   1.23\n",
       "1          km_driven   1.21\n",
       "8         Individual   1.09\n",
       "9   Trustmark Dealer   1.02"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vif = pd.DataFrame()\n",
    "X_t = pd.DataFrame(X_tr_scaled, columns=X_train.columns)\n",
    "vif['Features'] = X_t.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_t.values, i) for i in range(X_t.shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "74704514-ffac-41a9-9b3a-e3b0a49b03ce",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.941\n",
      "Model:                            OLS   Adj. R-squared:                  0.941\n",
      "Method:                 Least Squares   F-statistic:                 1.588e+04\n",
      "Date:                Thu, 28 Dec 2023   Prob (F-statistic):               0.00\n",
      "Time:                        22:01:46   Log-Likelihood:                -7.3180\n",
      "No. Observations:               15856   AIC:                             48.64\n",
      "Df Residuals:                   15839   BIC:                             179.0\n",
      "Df Model:                          16                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================\n",
      "                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "const               -0.0004      0.002     -0.223      0.823      -0.004       0.003\n",
      "age                 -0.1319      0.003    -49.425      0.000      -0.137      -0.127\n",
      "Petrol              -0.0238      0.008     -2.898      0.004      -0.040      -0.008\n",
      "Diesel               0.0129      0.008      1.614      0.107      -0.003       0.029\n",
      ">5                  -0.0359      0.007     -5.168      0.000      -0.050      -0.022\n",
      "5                   -0.0264      0.007     -4.005      0.000      -0.039      -0.013\n",
      "engine               0.0307      0.005      6.378      0.000       0.021       0.040\n",
      "model                0.7907      0.005    171.030      0.000       0.782       0.800\n",
      "max_power            0.0302      0.004      7.027      0.000       0.022       0.039\n",
      "mileage             -0.0498      0.003    -14.435      0.000      -0.057      -0.043\n",
      "make                 0.0607      0.003     17.612      0.000       0.054       0.067\n",
      "Manual              -0.0136      0.003     -5.285      0.000      -0.019      -0.009\n",
      "LPG                  0.0023      0.002      1.061      0.289      -0.002       0.007\n",
      "Electric             0.0155      0.002      7.266      0.000       0.011       0.020\n",
      "km_driven           -0.0169      0.002     -7.977      0.000      -0.021      -0.013\n",
      "Individual          -0.0179      0.002     -8.906      0.000      -0.022      -0.014\n",
      "Trustmark Dealer    -0.0031      0.002     -1.606      0.108      -0.007       0.001\n",
      "==============================================================================\n",
      "Omnibus:                     3788.584   Durbin-Watson:                   2.003\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           169531.293\n",
      "Skew:                           0.334   Prob(JB):                         0.00\n",
      "Kurtosis:                      19.005   Cond. No.                         12.6\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "cols2 = vif[\"Features\"][1:].values\n",
    "X2 = pd.DataFrame(X_tr_scaled, columns=X_train.columns)[cols2]\n",
    "\n",
    "X2_sm = sm.add_constant(X2)  #Statmodels default is without intercept, to add intercept we need to add constant\n",
    "sm_model = sm.OLS(list(y_train), X2_sm).fit()\n",
    "print(sm_model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8b76cb20-423a-4c2f-9f4e-24839e589306",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>year</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>age</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Petrol</td>\n",
       "      <td>18.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Diesel</td>\n",
       "      <td>17.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>&gt;5</td>\n",
       "      <td>13.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5</td>\n",
       "      <td>11.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>engine</td>\n",
       "      <td>6.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>model</td>\n",
       "      <td>5.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>max_power</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>mileage</td>\n",
       "      <td>3.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>make</td>\n",
       "      <td>3.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Manual</td>\n",
       "      <td>1.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>LPG</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Electric</td>\n",
       "      <td>1.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>km_driven</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Individual</td>\n",
       "      <td>1.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Trustmark Dealer</td>\n",
       "      <td>1.02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Features    VIF\n",
       "0               year    inf\n",
       "5                age    inf\n",
       "13            Petrol  18.30\n",
       "10            Diesel  17.30\n",
       "16                >5  13.04\n",
       "15                 5  11.75\n",
       "3             engine   6.26\n",
       "7              model   5.78\n",
       "4          max_power   5.00\n",
       "2            mileage   3.22\n",
       "6               make   3.21\n",
       "14            Manual   1.78\n",
       "12               LPG   1.25\n",
       "11          Electric   1.23\n",
       "1          km_driven   1.21\n",
       "8         Individual   1.09\n",
       "9   Trustmark Dealer   1.02"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "84a23072-ee15-4a38-8671-36a5eb22a3ee",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reached threshold\n",
      "Highest vif: Features    model\n",
      "VIF          5.75\n",
      "Name: 0, dtype: object\n",
      "Current adj.R2 0.8318553555450332\n",
      "Features removed: 4\n",
      "List of features removed: ['year', 'Petrol', '>5', 'engine']\n"
     ]
    }
   ],
   "source": [
    "vif_thr = 5\n",
    "r2_thr = 0.85\n",
    "i = 1\n",
    "feats_removed = ['year']\n",
    "while True:\n",
    "  vif = pd.DataFrame()\n",
    "  X_t = pd.DataFrame(X_tr_scaled, columns=X_train.columns)[cols2]\n",
    "  vif['Features'] = cols2\n",
    "  vif['VIF'] = [variance_inflation_factor(X_t.values, i) for i in range(X_t.shape[1])]\n",
    "  vif['VIF'] = round(vif['VIF'], 2)\n",
    "  vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "\n",
    "  cols2 = vif[\"Features\"][1:].values\n",
    "  X2 = pd.DataFrame(X_tr_scaled, columns=X_train.columns)[cols2]\n",
    "\n",
    "  X2_sm = sm.add_constant(X2)  #Statmodels default is without intercept, to add intercept we need to add constant\n",
    "  sm_model = sm.OLS(list(y_train), X2_sm).fit()\n",
    "  if (vif.iloc[0]['VIF'] < vif_thr) or (sm_model.rsquared_adj < r2_thr):\n",
    "    print('Reached threshold')\n",
    "    print('Highest vif:',vif.iloc[0])\n",
    "    print('Current adj.R2',sm_model.rsquared_adj)\n",
    "    print('Features removed:', i)\n",
    "    print('List of features removed:', feats_removed)\n",
    "    break\n",
    "  feats_removed.append(vif.iloc[0]['Features'])\n",
    "  i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3031f452-c7c3-4c01-8d5d-d43fe55de50e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Features   VIF\n",
      "0              model  5.75\n",
      "1          max_power  3.31\n",
      "2               make  3.16\n",
      "3            mileage  2.28\n",
      "5                age  1.88\n",
      "6             Manual  1.77\n",
      "4             Diesel  1.66\n",
      "7                  5  1.47\n",
      "9          km_driven  1.20\n",
      "8           Electric  1.18\n",
      "10        Individual  1.08\n",
      "11  Trustmark Dealer  1.02\n",
      "12               LPG  1.01\n"
     ]
    }
   ],
   "source": [
    "print(vif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c4d4bc02-28b8-470a-81b1-7682fd755461",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.832\n",
      "Model:                            OLS   Adj. R-squared:                  0.832\n",
      "Method:                 Least Squares   F-statistic:                     6538.\n",
      "Date:                Thu, 28 Dec 2023   Prob (F-statistic):               0.00\n",
      "Time:                        22:11:20   Log-Likelihood:                -8348.2\n",
      "No. Observations:               15856   AIC:                         1.672e+04\n",
      "Df Residuals:                   15843   BIC:                         1.682e+04\n",
      "Df Model:                          12                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================\n",
      "                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "const               -0.0004      0.003     -0.132      0.895      -0.007       0.006\n",
      "max_power            0.3037      0.005     56.642      0.000       0.293       0.314\n",
      "make                 0.3649      0.005     73.452      0.000       0.355       0.375\n",
      "mileage             -0.1150      0.005    -23.589      0.000      -0.125      -0.105\n",
      "age                 -0.3772      0.004   -101.122      0.000      -0.384      -0.370\n",
      "Manual              -0.1242      0.004    -29.627      0.000      -0.132      -0.116\n",
      "Diesel               0.1589      0.004     39.488      0.000       0.151       0.167\n",
      "5                   -0.0461      0.004    -11.759      0.000      -0.054      -0.038\n",
      "km_driven           -0.0294      0.004     -8.267      0.000      -0.036      -0.022\n",
      "Electric             0.0427      0.004     12.127      0.000       0.036       0.050\n",
      "Individual          -0.0338      0.003     -9.982      0.000      -0.040      -0.027\n",
      "Trustmark Dealer    -0.0065      0.003     -1.988      0.047      -0.013   -9.11e-05\n",
      "LPG                  0.0107      0.003      3.281      0.001       0.004       0.017\n",
      "==============================================================================\n",
      "Omnibus:                     2076.324   Durbin-Watson:                   1.980\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11955.803\n",
      "Skew:                           0.494   Prob(JB):                         0.00\n",
      "Kurtosis:                       7.138   Cond. No.                         3.44\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "print(sm_model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cf4ae460-81c2-4b8b-a900-f0212b8e02f3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_sm = sm.add_constant(X_tr_scaled)\n",
    "sm_model = sm.OLS(y_train, X_sm).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0ac66d6c-1025-40bf-b71b-1191be55b299",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Y_hat = sm_model.predict(X_sm)\n",
    "errors = Y_hat - y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f9a6b01c-7053-4749-a409-2712ffe4234e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='selling_price', ylabel='Count'>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.histplot(errors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7fda36cc-701c-44ba-90b6-625b9924f36f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/vidyasagar/anaconda3/lib/python3.11/site-packages/scipy/stats/_morestats.py:1816: UserWarning: p-value may not be accurate for N > 5000.\n",
      "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8527410626411438"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats\n",
    "res = stats.shapiro(errors)\n",
    "res.statistic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "426d4f22-29e4-4409-9da6-da7f47a7024c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Y_hat = sm_model.predict(X_sm)\n",
    "errors = Y_hat - y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "69e559a3-d2b0-4c71-8dd6-92e4bdab8029",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Predicted values vs Residuals')"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "sns.scatterplot(x=Y_hat,y=errors)\n",
    "plt.xlabel(\"predicted Selling price\")\n",
    "plt.ylabel(\"Residuals\")\n",
    "plt.title(\"Predicted values vs Residuals\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "791de4e4-3b4c-4d1f-8953-2830f4dc5713",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('F statistic', 1.0084600947540283), ('p-value', 0.3539283207366545)]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Performing the Goldfeld-Quandt test to check for Homoscedasticity -\n",
    "from statsmodels.compat import lzip\n",
    "import statsmodels.stats.api as sms\n",
    "\n",
    "name = ['F statistic', 'p-value']\n",
    "test = sms.het_goldfeldquandt(y_train, X2_sm)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "269be754-700f-44fe-83f2-8ec9bc24c480",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
